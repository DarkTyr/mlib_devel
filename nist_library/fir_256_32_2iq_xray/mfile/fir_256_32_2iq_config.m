
function fir_256_32_2iq_config(this_block)

  % Revision History:
  %
  %   17-May-2019  (12:13 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/pcuser/Documents/twoMHz_XRay/frdm_3p1mhz_rev0_0/src/fir_256_32_2iq.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('fir_256_32_2iq');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('RST');
  this_block.addSimulinkInport('I1IN');
  this_block.addSimulinkInport('Q1IN');
  this_block.addSimulinkInport('I0IN');
  this_block.addSimulinkInport('Q0IN');

  this_block.addSimulinkOutport('VALID');
  this_block.addSimulinkOutport('IOUT');
  this_block.addSimulinkOutport('QOUT');

  VALID_port = this_block.port('VALID');
  VALID_port.setType('UFix_1_0');
  VALID_port.useHDLVector(false);
  IOUT_port = this_block.port('IOUT');
  IOUT_port.setType('UFix_48_36');
  QOUT_port = this_block.port('QOUT');
  QOUT_port.setType('UFix_48_36');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('RST').width ~= 1);
      this_block.setError('Input data type for port "RST" must have width=1.');
    end

    this_block.port('RST').useHDLVector(false);

    if (this_block.port('I1IN').width ~= 18);
      this_block.setError('Input data type for port "I1IN" must have width=18.');
    end

    if (this_block.port('Q1IN').width ~= 18);
      this_block.setError('Input data type for port "Q1IN" must have width=18.');
    end

    if (this_block.port('I0IN').width ~= 18);
      this_block.setError('Input data type for port "I0IN" must have width=18.');
    end

    if (this_block.port('Q0IN').width ~= 18);
      this_block.setError('Input data type for port "Q0IN" must have width=18.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'CLK','CE')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  this_block.addFile('coefrom.vhd');
  this_block.addFile('fircompact.vhd');
  this_block.addFile('fir_256_32_2iq.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

